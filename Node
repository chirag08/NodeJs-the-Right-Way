EventEmitter and Stream

event dispatching

Best Practices : “functions as first-class citizens” and block scoping.

In Node.js, a module is a self-contained bit of JavaScript that provides functionality to be used elsewhere

EventEmitter is a very important class in Node. It provides a channel for events
to be dispatched and listeners notified.

An event listener is a callback function that is
invoked when an event of a specified type is dispatched. Since the Stream class
inherits from EventEmitter , we can listen for events from the child process’s
standard output stream.

Data events in particular pass along a buffer
object

A Buffer is Node’s way of representing binary data. It points to a blob of
memory allocated by Node’s native core, outside of the JavaScript engine.
Buffers can’t be resized and they require encoding and decoding to convert
to and from JavaScript strings.







//Explanation of Constructor and Extending Core module - EventEmitter (Ingeritance from EventEmitter)

Basically, Dog is supposedly a constructor with a property name. The EventEmitter.call(this), when executed during Dog instance creation, appends properties declared from the EventEmitter constructor to Dog.

Remember: constructors are still functions, and can still be used as functions.

//An example EventEmitter
function EventEmitter(){
  //for example, if EventEmitter had these properties
  //when EventEmitter.call(this) is executed in the Dog constructor
  //it basically passes the new instance of Dog into this function as "this"
  //where here, it appends properties to it
  this.foo = 'foo';
  this.bar = 'bar';
}

//And your constructor Dog
function Dog(name) {
    this.name = name;
    //during instance creation, this line calls the EventEmitter function
    //and passes "this" from this scope, which is your new instance of Dog
    //as "this" in the EventEmitter constructor
    EventEmitter.call(this);
}

//create Dog
var newDog = new Dog('furball');
//the name, from the Dog constructor
newDog.name; //furball
//foo and bar, which were appended to the instance by calling EventEmitter.call(this)
newDog.foo; //foo
newDoc.bar; //bar

